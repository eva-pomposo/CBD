Estrutura do dataset:
    O ficheiro "books.json" contêm a informaçao de livros de acordo com uma estrutura JSON.
    Cada livro é constituido por:_id, title, isbn, pageCount, publishedDate, thumbnailUrl, shortDescription, longDescription, status, uma lista de authors e uma lista de categories.

Alinea C:

// 1. Liste o title, o status e o isbn dos books com o title igual a "Agile ALM",ou "Taming Text", ou "Gnuplot in Action".
db.books.find({$or: [{title:"Agile ALM"}, {title:"Taming Text"}, {title:"Gnuplot in Action"}]}, {"title": 1, "status": 1, "isbn": 1} )

// 2. Encontre os books que tem um pagecount entre [300 e 500].
db.books.find({$and: [ { 'pageCount' : { $gte: 300 } }, { 'pageCount': { $lte: 500 } } ] }, { "_id": 0, "title": 1, "pageCount": 1} )

// 3.("Liste o title, o status, as categories e o pageCount de todos os books que tem uma das categories como "Networking" e tem um status "PUBLISH". Deve apresentá-los por ordem decrescente de pageCount:");
db.books.find({$and: [{"status": "PUBLISH" }, {"categories":  "Networking"} ]}, { "title": 1, "status": 1, "categories": 1, "pageCount": 1 } ).sort({pageCount: -1})

//4. Liste title e isbn de todos os books ordenando por ordem crescente do title e, em segundo, por ordem decrescente de isbn.
db.books.find({}, { "title": 1, "isbn": 1 } ).sort({title:1, isbn:-1})

// 5. Liste o title e o isbn dos books cujo title tem a seguinte sequencia de letras "Gro". 
db.books.find({"title": { $regex: "Gro*"} }, { "title": 1, "isbn": 1} )

// 6. Liste o title, o status e as categories dos books que nao têm a categorie "Networking"
db.books.find({categorie: {$ne: 'Networking'}},{"title": 1, "status": 1, "categories": 1})

Alinea D: 

// 1. Conte o total de books existentes em cada publishedDate
db.books.aggregate([{$group:{_id:"$publishedDate", num:{$sum:1}}}])

// 2. Apresente o número de books que possuem 'Gro' no title
db.books.aggregate([{$match: {title: {$regex: 'Gro*'}}},{$count: 'num_books'}])

//3. Apresente a pageCount mais utilizada pelos books
db.books.aggregate([{$group:{ _id:"$pageCount", sum:{$sum:1}}},{$sort:{sum:-1}},{$limit:1}])

//4. Conte quantos books existem por pageCount e ordene por ordem decrescente 
db.books.aggregate([{$group:{_id:"$pageCount", num_books:{$sum:1}}}, {$sort:{num_books:-1}}])

//5. Apresente o número de status diferentes no pageCount 0
db.books.aggregate([{$match: {"pageCount":0}}, {$group:{_id:"$status"}}, {$count: "status"}])

//6. Apresente o status menos utilizado pelos books
db.books.aggregate([{$group:{ _id:"$status", sum:{$sum:1}}},{$sort:{sum:1}},{$limit:1}])


